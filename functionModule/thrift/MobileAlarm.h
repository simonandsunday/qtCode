/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MobileAlarm_H
#define MobileAlarm_H

#include <thrift/TDispatchProcessor.h>
#include "MobileAlarmAPI_types.h"

namespace MOBILE_ALARM_API {

class MobileAlarmIf {
 public:
  virtual ~MobileAlarmIf() {}
  virtual void AlarmTrigger(std::string& _return, const std::string& content) = 0;
  virtual void AlarmQueryList(std::string& _return, const std::string& content) = 0;
  virtual void AlarmQueryDetail(std::string& _return, const std::string& content) = 0;
  virtual void AlarmReset(std::string& _return, const std::string& content) = 0;
};

class MobileAlarmIfFactory {
 public:
  typedef MobileAlarmIf Handler;

  virtual ~MobileAlarmIfFactory() {}

  virtual MobileAlarmIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MobileAlarmIf* /* handler */) = 0;
};

class MobileAlarmIfSingletonFactory : virtual public MobileAlarmIfFactory {
 public:
  MobileAlarmIfSingletonFactory(const boost::shared_ptr<MobileAlarmIf>& iface) : iface_(iface) {}
  virtual ~MobileAlarmIfSingletonFactory() {}

  virtual MobileAlarmIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MobileAlarmIf* /* handler */) {}

 protected:
  boost::shared_ptr<MobileAlarmIf> iface_;
};

class MobileAlarmNull : virtual public MobileAlarmIf {
 public:
  virtual ~MobileAlarmNull() {}
  void AlarmTrigger(std::string& /* _return */, const std::string& /* content */) {
    return;
  }
  void AlarmQueryList(std::string& /* _return */, const std::string& /* content */) {
    return;
  }
  void AlarmQueryDetail(std::string& /* _return */, const std::string& /* content */) {
    return;
  }
  void AlarmReset(std::string& /* _return */, const std::string& /* content */) {
    return;
  }
};

typedef struct _MobileAlarm_AlarmTrigger_args__isset {
  _MobileAlarm_AlarmTrigger_args__isset() : content(false) {}
  bool content :1;
} _MobileAlarm_AlarmTrigger_args__isset;

class MobileAlarm_AlarmTrigger_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MobileAlarm_AlarmTrigger_args(const MobileAlarm_AlarmTrigger_args&);
  MobileAlarm_AlarmTrigger_args& operator=(const MobileAlarm_AlarmTrigger_args&);
  MobileAlarm_AlarmTrigger_args() : content() {
  }

  virtual ~MobileAlarm_AlarmTrigger_args() throw();
  std::string content;

  _MobileAlarm_AlarmTrigger_args__isset __isset;

  void __set_content(const std::string& val);

  bool operator == (const MobileAlarm_AlarmTrigger_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmTrigger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmTrigger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmTrigger_args& obj);
};


class MobileAlarm_AlarmTrigger_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MobileAlarm_AlarmTrigger_pargs() throw();
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmTrigger_pargs& obj);
};

typedef struct _MobileAlarm_AlarmTrigger_result__isset {
  _MobileAlarm_AlarmTrigger_result__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmTrigger_result__isset;

class MobileAlarm_AlarmTrigger_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MobileAlarm_AlarmTrigger_result(const MobileAlarm_AlarmTrigger_result&);
  MobileAlarm_AlarmTrigger_result& operator=(const MobileAlarm_AlarmTrigger_result&);
  MobileAlarm_AlarmTrigger_result() : success() {
  }

  virtual ~MobileAlarm_AlarmTrigger_result() throw();
  std::string success;

  _MobileAlarm_AlarmTrigger_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MobileAlarm_AlarmTrigger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmTrigger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmTrigger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmTrigger_result& obj);
};

typedef struct _MobileAlarm_AlarmTrigger_presult__isset {
  _MobileAlarm_AlarmTrigger_presult__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmTrigger_presult__isset;

class MobileAlarm_AlarmTrigger_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MobileAlarm_AlarmTrigger_presult() throw();
  std::string* success;

  _MobileAlarm_AlarmTrigger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmTrigger_presult& obj);
};

typedef struct _MobileAlarm_AlarmQueryList_args__isset {
  _MobileAlarm_AlarmQueryList_args__isset() : content(false) {}
  bool content :1;
} _MobileAlarm_AlarmQueryList_args__isset;

class MobileAlarm_AlarmQueryList_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MobileAlarm_AlarmQueryList_args(const MobileAlarm_AlarmQueryList_args&);
  MobileAlarm_AlarmQueryList_args& operator=(const MobileAlarm_AlarmQueryList_args&);
  MobileAlarm_AlarmQueryList_args() : content() {
  }

  virtual ~MobileAlarm_AlarmQueryList_args() throw();
  std::string content;

  _MobileAlarm_AlarmQueryList_args__isset __isset;

  void __set_content(const std::string& val);

  bool operator == (const MobileAlarm_AlarmQueryList_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmQueryList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmQueryList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryList_args& obj);
};


class MobileAlarm_AlarmQueryList_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MobileAlarm_AlarmQueryList_pargs() throw();
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryList_pargs& obj);
};

typedef struct _MobileAlarm_AlarmQueryList_result__isset {
  _MobileAlarm_AlarmQueryList_result__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmQueryList_result__isset;

class MobileAlarm_AlarmQueryList_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MobileAlarm_AlarmQueryList_result(const MobileAlarm_AlarmQueryList_result&);
  MobileAlarm_AlarmQueryList_result& operator=(const MobileAlarm_AlarmQueryList_result&);
  MobileAlarm_AlarmQueryList_result() : success() {
  }

  virtual ~MobileAlarm_AlarmQueryList_result() throw();
  std::string success;

  _MobileAlarm_AlarmQueryList_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MobileAlarm_AlarmQueryList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmQueryList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmQueryList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryList_result& obj);
};

typedef struct _MobileAlarm_AlarmQueryList_presult__isset {
  _MobileAlarm_AlarmQueryList_presult__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmQueryList_presult__isset;

class MobileAlarm_AlarmQueryList_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MobileAlarm_AlarmQueryList_presult() throw();
  std::string* success;

  _MobileAlarm_AlarmQueryList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryList_presult& obj);
};

typedef struct _MobileAlarm_AlarmQueryDetail_args__isset {
  _MobileAlarm_AlarmQueryDetail_args__isset() : content(false) {}
  bool content :1;
} _MobileAlarm_AlarmQueryDetail_args__isset;

class MobileAlarm_AlarmQueryDetail_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MobileAlarm_AlarmQueryDetail_args(const MobileAlarm_AlarmQueryDetail_args&);
  MobileAlarm_AlarmQueryDetail_args& operator=(const MobileAlarm_AlarmQueryDetail_args&);
  MobileAlarm_AlarmQueryDetail_args() : content() {
  }

  virtual ~MobileAlarm_AlarmQueryDetail_args() throw();
  std::string content;

  _MobileAlarm_AlarmQueryDetail_args__isset __isset;

  void __set_content(const std::string& val);

  bool operator == (const MobileAlarm_AlarmQueryDetail_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmQueryDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmQueryDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryDetail_args& obj);
};


class MobileAlarm_AlarmQueryDetail_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MobileAlarm_AlarmQueryDetail_pargs() throw();
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryDetail_pargs& obj);
};

typedef struct _MobileAlarm_AlarmQueryDetail_result__isset {
  _MobileAlarm_AlarmQueryDetail_result__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmQueryDetail_result__isset;

class MobileAlarm_AlarmQueryDetail_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MobileAlarm_AlarmQueryDetail_result(const MobileAlarm_AlarmQueryDetail_result&);
  MobileAlarm_AlarmQueryDetail_result& operator=(const MobileAlarm_AlarmQueryDetail_result&);
  MobileAlarm_AlarmQueryDetail_result() : success() {
  }

  virtual ~MobileAlarm_AlarmQueryDetail_result() throw();
  std::string success;

  _MobileAlarm_AlarmQueryDetail_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MobileAlarm_AlarmQueryDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmQueryDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmQueryDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryDetail_result& obj);
};

typedef struct _MobileAlarm_AlarmQueryDetail_presult__isset {
  _MobileAlarm_AlarmQueryDetail_presult__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmQueryDetail_presult__isset;

class MobileAlarm_AlarmQueryDetail_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MobileAlarm_AlarmQueryDetail_presult() throw();
  std::string* success;

  _MobileAlarm_AlarmQueryDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmQueryDetail_presult& obj);
};

typedef struct _MobileAlarm_AlarmReset_args__isset {
  _MobileAlarm_AlarmReset_args__isset() : content(false) {}
  bool content :1;
} _MobileAlarm_AlarmReset_args__isset;

class MobileAlarm_AlarmReset_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MobileAlarm_AlarmReset_args(const MobileAlarm_AlarmReset_args&);
  MobileAlarm_AlarmReset_args& operator=(const MobileAlarm_AlarmReset_args&);
  MobileAlarm_AlarmReset_args() : content() {
  }

  virtual ~MobileAlarm_AlarmReset_args() throw();
  std::string content;

  _MobileAlarm_AlarmReset_args__isset __isset;

  void __set_content(const std::string& val);

  bool operator == (const MobileAlarm_AlarmReset_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmReset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmReset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmReset_args& obj);
};


class MobileAlarm_AlarmReset_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MobileAlarm_AlarmReset_pargs() throw();
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmReset_pargs& obj);
};

typedef struct _MobileAlarm_AlarmReset_result__isset {
  _MobileAlarm_AlarmReset_result__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmReset_result__isset;

class MobileAlarm_AlarmReset_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MobileAlarm_AlarmReset_result(const MobileAlarm_AlarmReset_result&);
  MobileAlarm_AlarmReset_result& operator=(const MobileAlarm_AlarmReset_result&);
  MobileAlarm_AlarmReset_result() : success() {
  }

  virtual ~MobileAlarm_AlarmReset_result() throw();
  std::string success;

  _MobileAlarm_AlarmReset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MobileAlarm_AlarmReset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MobileAlarm_AlarmReset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileAlarm_AlarmReset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmReset_result& obj);
};

typedef struct _MobileAlarm_AlarmReset_presult__isset {
  _MobileAlarm_AlarmReset_presult__isset() : success(false) {}
  bool success :1;
} _MobileAlarm_AlarmReset_presult__isset;

class MobileAlarm_AlarmReset_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MobileAlarm_AlarmReset_presult() throw();
  std::string* success;

  _MobileAlarm_AlarmReset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MobileAlarm_AlarmReset_presult& obj);
};

class MobileAlarmClient : virtual public MobileAlarmIf {
 public:
  MobileAlarmClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MobileAlarmClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AlarmTrigger(std::string& _return, const std::string& content);
  void send_AlarmTrigger(const std::string& content);
  void recv_AlarmTrigger(std::string& _return);
  void AlarmQueryList(std::string& _return, const std::string& content);
  void send_AlarmQueryList(const std::string& content);
  void recv_AlarmQueryList(std::string& _return);
  void AlarmQueryDetail(std::string& _return, const std::string& content);
  void send_AlarmQueryDetail(const std::string& content);
  void recv_AlarmQueryDetail(std::string& _return);
  void AlarmReset(std::string& _return, const std::string& content);
  void send_AlarmReset(const std::string& content);
  void recv_AlarmReset(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MobileAlarmProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MobileAlarmIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MobileAlarmProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AlarmTrigger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AlarmQueryList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AlarmQueryDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AlarmReset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MobileAlarmProcessor(boost::shared_ptr<MobileAlarmIf> iface) :
    iface_(iface) {
    processMap_["AlarmTrigger"] = &MobileAlarmProcessor::process_AlarmTrigger;
    processMap_["AlarmQueryList"] = &MobileAlarmProcessor::process_AlarmQueryList;
    processMap_["AlarmQueryDetail"] = &MobileAlarmProcessor::process_AlarmQueryDetail;
    processMap_["AlarmReset"] = &MobileAlarmProcessor::process_AlarmReset;
  }

  virtual ~MobileAlarmProcessor() {}
};

class MobileAlarmProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MobileAlarmProcessorFactory(const ::boost::shared_ptr< MobileAlarmIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MobileAlarmIfFactory > handlerFactory_;
};

class MobileAlarmMultiface : virtual public MobileAlarmIf {
 public:
  MobileAlarmMultiface(std::vector<boost::shared_ptr<MobileAlarmIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MobileAlarmMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MobileAlarmIf> > ifaces_;
  MobileAlarmMultiface() {}
  void add(boost::shared_ptr<MobileAlarmIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AlarmTrigger(std::string& _return, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AlarmTrigger(_return, content);
    }
    ifaces_[i]->AlarmTrigger(_return, content);
    return;
  }

  void AlarmQueryList(std::string& _return, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AlarmQueryList(_return, content);
    }
    ifaces_[i]->AlarmQueryList(_return, content);
    return;
  }

  void AlarmQueryDetail(std::string& _return, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AlarmQueryDetail(_return, content);
    }
    ifaces_[i]->AlarmQueryDetail(_return, content);
    return;
  }

  void AlarmReset(std::string& _return, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AlarmReset(_return, content);
    }
    ifaces_[i]->AlarmReset(_return, content);
    return;
  }

};

} // namespace

#endif
